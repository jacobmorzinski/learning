<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1464626537778">{:repl-history {:ide [], :local [&quot;(-main)&quot; &quot;(def fish-numbers {0 \&quot;Zero\&quot;\n                   1 \&quot;One\&quot;\n                   2 \&quot;Two\&quot;})&quot; &quot;(s/def ::fish-number (set (keys fish-numbers)))&quot; &quot;(s/valid? ::fish-number 1)&quot; &quot;(s/valid? ::fish-number 5)&quot; &quot;(s/explain ::fish-number 5)&quot; &quot;#{\&quot;Red\&quot; \&quot;Blue\&quot; \&quot;Dun\&quot;}&quot; &quot;(s/def ::color #{\&quot;Red\&quot; \&quot;Blue\&quot; \&quot;Dun\&quot;})&quot; &quot;(s/def ::first-line (s/cat :n1 ::number :n2 ::number\n                           :c1 ::color :c2 ::color))&quot; &quot;\&quot;Black\&quot;&quot; &quot;(s/explain ::first-line [1 2 \&quot;Red\&quot; \&quot;Black\&quot;])&quot; &quot;(defn one-bigger? [{:keys [n1 n2]}]\n  (= n2 (inc n1)))&quot; &quot;(s/def ::first-line (s/and (s/cat :n1 ::number :n2 ::number\n                                  :c1 ::color :c2 ::color)\n                           one-bigger?\n                           #(not= (:c1 %) (:c2 %))))&quot; &quot;(s/explain? ::first-line [1 2 \&quot;Red\&quot; \&quot;Blue\&quot;])&quot; &quot;(s/explain ::first-line [1 2 \&quot;Red\&quot; \&quot;Blue\&quot;])&quot; &quot;(s/def ::first-line (s/and (s/cat :n1 ::fish-number :n2 ::fish-number\n                                  :c1 ::color :c2 ::color)\n                           one-bigger?\n                           #(not= (:c1 %) (:c2 %))))&quot; &quot;(s/conform ::first-line [1 2 \&quot;Red\&quot; \&quot;Blue\&quot;])&quot; &quot;(s/explain ::first-line [2 1 \&quot;Red\&quot; \&quot;Blue\&quot;])&quot; &quot;(s/exercise ::first-line 5)&quot; &quot;(defn number-rhymes-with-color? [{n :n2 c :c2}]\n  (or\n    (= [n c] [2 \&quot;Blue\&quot;])\n    (= [n c] [1 \&quot;Dun\&quot;])))&quot; &quot;(defn fish-number-rhymes-with-color? [{n :n2 c :c2}]\n  (or\n    (= [n c] [2 \&quot;Blue\&quot;])\n    (= [n c] [1 \&quot;Dun\&quot;])))&quot; &quot;(s/def ::first-line (s/and (s/cat :n1 ::fish-number :n2 ::fish-number\n                                  :c1 ::color :c2 ::color)\n                           one-bigger?\n                           #(not= (:c1 %) (:c2 %))\n                           fish-number-rhymes-with-color?))&quot; &quot;(s/valid? ::first-line [1 2 \&quot;Red\&quot; \&quot;Blue\&quot;])&quot; &quot;(s/valid? ::first-line [1 2 \&quot;Red\&quot; \&quot;Dun\&quot;])&quot; &quot;(s/exercise ::first-line)&quot; &quot;(defn fish-line [n1 n2 c1 c2]\n  (clojure.string/join \&quot; \&quot;\n                       (map #(str % \&quot; fish.\&quot;)\n                            [(get fish-numbers n1)\n                             (get fish-numbers n2)\n                             c1\n                             c2])))&quot; &quot;(fish-line [0 1 \&quot;red\&quot; \&quot;dun\&quot;])&quot; &quot;(fish-line 0 1 \&quot;red\&quot; \&quot;dun\&quot;)&quot; &quot;(s/fdef fish-line\n        :args ::first-line\n        :ret string?)&quot; &quot;(s/instrument #'fish-line)&quot; &quot;(fish-line 1 2 \&quot;Red\&quot; \&quot;Blue\&quot;)&quot; &quot;(fish-line 1 2 \&quot;Red\&quot; \&quot;Dun\&quot;)&quot; &quot;(-&gt; (s/exercise ::first-line 4)\n    (fish-line))&quot; &quot;(-&gt; (s/exercise ::first-line 4)\n    (map fish-line))&quot; &quot;(-&gt; (s/exercise ::first-line 4)\n    (apply fish-line))&quot; &quot;(-&gt;&gt; (s/exercise ::first-line 4)\n    (apply fish-line))&quot; &quot;(s/exercise ::first-line 4)&quot; &quot;(first (s/exercise ::first-line 4))&quot; &quot;(first (first (s/exercise ::first-line 4)))&quot; &quot;(fish-line (first (first (s/exercise ::first-line 4))))&quot; &quot;(appply fish-line (first (first (s/exercise ::first-line 4))))&quot; &quot;(apply fish-line (first (first (s/exercise ::first-line 4))))&quot; &quot;(doc for)&quot; &quot;(take 1 (for [l (s/exercize ::first-line)]\n          l))&quot; &quot;(take 1 (for [l (s/exercise ::first-line)]\n          l))&quot; &quot;(take 1 (for [l (s/exercise ::first-line)]\n          (first l)))&quot; &quot;(for [l (s/exercise ::first-line)]\n  (first l))&quot; &quot;(for [l (s/exercise ::first-line)]\n  (apply fish-line (first l)))&quot; &quot;(for [l (s/exercise ::first-line 5)]\n  (apply fish-line (first l)))&quot;], :remote []}}</component>
</project>